.. index:: pair: class; sophus::MutImage
.. _doxid-classsophus_1_1_mut_image:

template class sophus::MutImage
===============================

.. toctree::
	:hidden:

	struct_sophus_MutImage_Deleter.rst
	struct_sophus_MutImage_TypedDeleterImpl.rst

Overview
~~~~~~~~

A image with write access to pixels and exclusive ownership. There is no copy constr / copy assignment, but move constr / assignment. :ref:`More...<details-classsophus_1_1_mut_image>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <image.h>
	
	template <
		class TPixel,
		template<class> class TAllocator = Eigen::aligned_allocator
	>
	class MutImage: public :ref:`sophus::MutImageView<doxid-classsophus_1_1_mut_image_view>` {
	public:
		// structs
	
		struct :ref:`Deleter<doxid-structsophus_1_1_mut_image_1_1_deleter>`;
		struct :ref:`TypedDeleterImpl<doxid-structsophus_1_1_mut_image_1_1_typed_deleter_impl>`;

		// construction
	
		:ref:`MutImage<doxid-classsophus_1_1_mut_image_1a5ebbb686d8cc26985b107cb75bdea443>`();
		:ref:`MutImage<doxid-classsophus_1_1_mut_image_1a05b303ab1d7359883b7e2b16eadcb05d>`(:ref:`ImageShape<doxid-classsophus_1_1_image_shape>` shape);
		:ref:`MutImage<doxid-classsophus_1_1_mut_image_1a26b47c4be42c8024ef299a7672b0312d>`(:ref:`sophus::ImageSize<doxid-structsophus_1_1_image_size>` size);
		:ref:`MutImage<doxid-classsophus_1_1_mut_image_1a89b00ee275e177be0794ca8940d1d3c9>`(MutImage<TPixel> const& other);
		:ref:`MutImage<doxid-classsophus_1_1_mut_image_1a8b125aaa2b74ba918a8916dff6d9e74d>`(MutImage&& img);
		:ref:`~MutImage<doxid-classsophus_1_1_mut_image_1ac6b12d1ab8419c76224d3bde01e50f33>`();

		// methods
	
		MutImage& :ref:`operator=<doxid-classsophus_1_1_mut_image_1ad3f31ff0f836671551dbf2a7e071bf9e>`(MutImage const&);
		MutImage& :ref:`operator=<doxid-classsophus_1_1_mut_image_1aae57c36821ec473bdbb3c2bc91e840af>`(MutImage&& img);
		:ref:`MutImageView<doxid-classsophus_1_1_mut_image_view>`<TPixel> :target:`viewMut<doxid-classsophus_1_1_mut_image_1a7073d09224c8daefde21e625834343f2>`() const;
		void :ref:`swap<doxid-classsophus_1_1_mut_image_1a9bc9d0909c691e31f9d3a0f7a91d92f9>`(MutImage& img);
		void :ref:`reset<doxid-classsophus_1_1_mut_image_1a18e600def58f93d7eab27a52ef29ce91>`();
		static MutImage :ref:`makeCopyFrom<doxid-classsophus_1_1_mut_image_1ae3daec7244442851606b481b3ddc98c2>`(:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TPixel> const& view);
	
		template <class TOtherPixel, class TUnaryOperation>
		static MutImage :ref:`makeFromTransform<doxid-classsophus_1_1_mut_image_1a3f83eb3b54c431d620c67d05bb0eb79e>`(
			:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TOtherPixel> view,
			TUnaryOperation const& unary_op
		);
	
		template <class TLhsPixel, class TRhsPixel, class TBinaryOperation>
		static MutImage :ref:`makeFromTransform<doxid-classsophus_1_1_mut_image_1a8af9f384c89f2ae849b9586fd5d6c51a>`(
			:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TLhsPixel> lhs,
			:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TRhsPixel> rhs,
			TBinaryOperation const& binary_op
		);

	protected:
		// fields
	
		std::shared_ptr<uint8_t> :ref:`shared_<doxid-classsophus_1_1_mut_image_1a5b4d579497eff3c6a20d83c35cc2d034>`;

		// methods
	
		:ref:`Deleter<doxid-structsophus_1_1_mut_image_1_1_deleter>` :ref:`leakAndReturnDeleter<doxid-classsophus_1_1_mut_image_1a81fab866b4e49e17fc37f2cd05e3ab52>`();
	};

Inherited Members
-----------------

.. ref-code-block:: cpp
	:class: doxyrest-overview-inherited-code-block

	public:
		// typedefs
	
		using :ref:`PixelType<doxid-structsophus_1_1_image_view_1a824084f4aff167459313deffc016842b>` = TPixel ;

		// methods
	
		bool :ref:`isEmpty<doxid-structsophus_1_1_image_view_1ae44579c06f0dc6c89c960b153c076ed9>`() const;
		bool :ref:`isContiguous<doxid-structsophus_1_1_image_view_1a97bf64cfd7432518442b0f54262f56f7>`() const;
		:ref:`sophus::ImageSize<doxid-structsophus_1_1_image_size>` const& :ref:`imageSize<doxid-structsophus_1_1_image_view_1aad892d6f77fa63451e76624713b24908>`() const;
		:ref:`ImageShape<doxid-classsophus_1_1_image_shape>` const& :ref:`shape<doxid-structsophus_1_1_image_view_1a46ebaa9fd38c3216576b8fae690b3b9b>`() const;
		int :ref:`width<doxid-structsophus_1_1_image_view_1ac719f68b41c8af953d6ebc239192ceeb>`() const;
		int :ref:`height<doxid-structsophus_1_1_image_view_1a4aa4a7d41508c32e464bce5e36260945>`() const;
		size_t :ref:`pitchBytes<doxid-structsophus_1_1_image_view_1aa25fa2b48e9979f4e4854d46430a8695>`() const;
		bool :ref:`colInBounds<doxid-structsophus_1_1_image_view_1a62b279caff31b08bfcff294e1518fd07>`(int u) const;
		bool :ref:`rowInBounds<doxid-structsophus_1_1_image_view_1ab9be65c29efe027adc8669484dc1ef96>`(int v) const;
		TPixel const* :ref:`rowPtr<doxid-structsophus_1_1_image_view_1ac2fd0caae912334d8cfba0152ea2eda0>`(int v) const;
		TPixel const& :ref:`checked<doxid-structsophus_1_1_image_view_1acd29b4985412381df7385cd887f6d591>`(int u, int v) const;
		TPixel const& :ref:`checked<doxid-structsophus_1_1_image_view_1a237f9159c75cb276635dbd45d9faebb9>`(Eigen::Vector2i uv) const;
		TPixel const& :ref:`unchecked<doxid-structsophus_1_1_image_view_1a912b28894dfdb53310f8c5fe07d87fb9>`(int u, int v) const;
		TPixel const& :ref:`unchecked<doxid-structsophus_1_1_image_view_1a615cbb9c94939364913c46d8348dbc15>`(Eigen::Vector2i uv) const;
		TPixel const* :ref:`ptr<doxid-structsophus_1_1_image_view_1ab89ef317eebaf3a71f15d7a723ea01a3>`() const;
		:ref:`ImageView<doxid-structsophus_1_1_image_view>` :ref:`subview<doxid-structsophus_1_1_image_view_1a198df907fecd7103724f1ffd02f8310c>`(Eigen::Vector2i uv, :ref:`sophus::ImageSize<doxid-structsophus_1_1_image_size>` size) const;
	
		template <class TFunc>
		void :ref:`visit<doxid-structsophus_1_1_image_view_1a2355eb158506aafc762a7a057975c13b>`(TFunc const& user_function) const;
	
		template <class TReduceOp, class TVal>
		TVal :ref:`reduce<doxid-structsophus_1_1_image_view_1ad6ee10edcbc6267d9d92eb66e77a291e>`(
			TReduceOp const& reduce_op,
			TVal val = TVal{}
		) const;
	
		template <class TShortCircuitReduceOp, class TVal>
		TVal :ref:`shortCircuitReduce<doxid-structsophus_1_1_image_view_1a8fc012bee1f58e9fd976125a216fc650>`(
			TShortCircuitReduceOp const& short_circuit_reduce_op,
			TVal val = TVal{}
		) const;
	
		bool :ref:`operator==<doxid-structsophus_1_1_image_view_1a8d34fd6288b9faf9e5cf7457c2136809>`(:ref:`ImageView<doxid-structsophus_1_1_image_view>` const& rhs) const;
		bool :ref:`operator!=<doxid-structsophus_1_1_image_view_1a17ad6c4e80f27ebb8be855b1e8a602ca>`(:ref:`ImageView<doxid-structsophus_1_1_image_view>` const& rhs) const;
		bool :ref:`hasSameData<doxid-structsophus_1_1_image_view_1a2b9537ef883c762342bc956a4bbcad35>`(:ref:`ImageView<doxid-structsophus_1_1_image_view>` const& rhs) const;
		:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TPixel> :ref:`view<doxid-classsophus_1_1_mut_image_view_1a316a7ea4f0d30b51d554bed7c35bcc07>`() const;
		void :ref:`copyDataFrom<doxid-classsophus_1_1_mut_image_view_1a037a905748d5f57f6ae8855f4d84bc1c>`(:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TPixel> view) const;
		TPixel* :ref:`rowPtrMut<doxid-classsophus_1_1_mut_image_view_1adb87eca7ec807d1fcc7d87d5b98d7856>`(int v) const;
		TPixel& :ref:`checkedMut<doxid-classsophus_1_1_mut_image_view_1a6899630663025362ad8e58234c319c49>`(int u, int v) const;
		TPixel& :ref:`checkedMut<doxid-classsophus_1_1_mut_image_view_1aeb2474a80f3c402f8de8d6dd815ccb0b>`(Eigen::Vector2i uv) const;
		TPixel& :ref:`uncheckedMut<doxid-classsophus_1_1_mut_image_view_1afce3cc068a09a13b7bcaccdaf56d273b>`(int u, int v) const;
		TPixel& :ref:`uncheckedMut<doxid-classsophus_1_1_mut_image_view_1ae127322c2435cc900792bd5d7f7d12fb>`(Eigen::Vector2i uv) const;
	
		template <class TUnaryOperation>
		void :ref:`mutate<doxid-classsophus_1_1_mut_image_view_1a6aed03d8c1f782336b751e4580ee8e01>`(TUnaryOperation const& unary_op) const;
	
		template <class TUVOperation>
		void :ref:`generate<doxid-classsophus_1_1_mut_image_view_1ad17676ebdfe00b688a81d674ecfa7fa3>`(TUVOperation const& uv_op) const;
	
		template <class TOtherPixel, class TUnaryOperation>
		void :ref:`transformFrom<doxid-classsophus_1_1_mut_image_view_1aa2157348c35c25ed131eebab9e800df8>`(
			:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TOtherPixel> view,
			TUnaryOperation const& unary_op
		) const;
	
		template <class TLhsPixel, class TRhsPixel, class TBinaryOperation>
		void :ref:`transformFrom<doxid-classsophus_1_1_mut_image_view_1ab8dbbd6d64e13d32c29a3f5e644cabbb>`(
			:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TLhsPixel> lhs,
			:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TRhsPixel> rhs,
			TBinaryOperation const& binary_op
		) const;
	
		void :ref:`fill<doxid-classsophus_1_1_mut_image_view_1a61d68c099905831da518a3c6eb02ead1>`(TPixel const& val) const;
		TPixel* :ref:`ptrMut<doxid-classsophus_1_1_mut_image_view_1a6f5022a0a14867021e64690b3937918a>`() const;
		:ref:`MutImageView<doxid-classsophus_1_1_mut_image_view>` :ref:`mutSubview<doxid-classsophus_1_1_mut_image_view_1a3e0b90bda3a8448a30d16412c064b738>`(Eigen::Vector2i uv, :ref:`sophus::ImageSize<doxid-structsophus_1_1_image_size>` size) const;
		static :ref:`MutImageView<doxid-classsophus_1_1_mut_image_view>` :ref:`unsafeConstCast<doxid-classsophus_1_1_mut_image_view_1a75758f23b087e537d59dfde22de0490e>`(:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TPixel> view);

	protected:
		// fields
	
		:ref:`ImageShape<doxid-classsophus_1_1_image_shape>` :ref:`shape_<doxid-structsophus_1_1_image_view_1a5fdbe7864c510048142e9af82735d501>` = {};
		TPixel const* :ref:`ptr_<doxid-structsophus_1_1_image_view_1a771ec00e4928adc63935e2f3d456ff2d>` = nullptr;

		// methods
	
		void :ref:`setViewToEmpty<doxid-structsophus_1_1_image_view_1a528bbadf7c273703e3b2d3aac877152b>`();

.. _details-classsophus_1_1_mut_image:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

A image with write access to pixels and exclusive ownership. There is no copy constr / copy assignment, but move constr / assignment.

Content from a :ref:`MutImage <doxid-classsophus_1_1_mut_image>` can be moved into an :ref:`Image <doxid-classsophus_1_1_image>`.

Type is nullable. In that case ``this->:ref:`isEmpty() <doxid-structsophus_1_1_image_view_1ae44579c06f0dc6c89c960b153c076ed9>``` is true.

Similar to Pangolin::ManagedImage.

Fields
------

.. index:: pair: variable; shared_
.. _doxid-classsophus_1_1_mut_image_1a5b4d579497eff3c6a20d83c35cc2d034:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	std::shared_ptr<uint8_t> shared_

:ref:`MutImage <doxid-classsophus_1_1_mut_image>` has unique ownership, and hence behaves like a unique_ptr. As an implementation detail, we use a shared_ptr here, so it will be easy to support moving a :ref:`Image <doxid-classsophus_1_1_image>` with unique ownership at runtime into a :ref:`MutImage <doxid-classsophus_1_1_mut_image>`. Class invariant: shared\_.use_count() == 0 \|\| shared\_.use_count() == 1.

Construction
------------

.. index:: pair: function; MutImage
.. _doxid-classsophus_1_1_mut_image_1a5ebbb686d8cc26985b107cb75bdea443:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	MutImage()

Constructs empty image.

.. index:: pair: function; MutImage
.. _doxid-classsophus_1_1_mut_image_1a05b303ab1d7359883b7e2b16eadcb05d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	MutImage(:ref:`ImageShape<doxid-classsophus_1_1_image_shape>` shape)

Creates new image with given shape.

If shape is not empty, memory allocation will happen.

.. index:: pair: function; MutImage
.. _doxid-classsophus_1_1_mut_image_1a26b47c4be42c8024ef299a7672b0312d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	MutImage(:ref:`sophus::ImageSize<doxid-structsophus_1_1_image_size>` size)

Creates new contiguous image with given size.

If shape is not empty, memory allocation will happen.

.. index:: pair: function; MutImage
.. _doxid-classsophus_1_1_mut_image_1a89b00ee275e177be0794ca8940d1d3c9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	MutImage(MutImage<TPixel> const& other)

Not copy constructable.

.. index:: pair: function; MutImage
.. _doxid-classsophus_1_1_mut_image_1a8b125aaa2b74ba918a8916dff6d9e74d:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	MutImage(MutImage&& img)

Move constructor - is cheap - no memory allocations.

.. _doxid-classsophus_1_1_mut_image_1ac6b12d1ab8419c76224d3bde01e50f33:
.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	~MutImage()

Destructor.

Methods
-------

.. index:: pair: function; operator=
.. _doxid-classsophus_1_1_mut_image_1ad3f31ff0f836671551dbf2a7e071bf9e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	MutImage& operator=(MutImage const&)

Not copy assignable.

.. index:: pair: function; operator=
.. _doxid-classsophus_1_1_mut_image_1aae57c36821ec473bdbb3c2bc91e840af:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	MutImage& operator=(MutImage&& img)

Move assignment.

.. index:: pair: function; swap
.. _doxid-classsophus_1_1_mut_image_1a9bc9d0909c691e31f9d3a0f7a91d92f9:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void swap(MutImage& img)

Swaps img and this.

.. index:: pair: function; reset
.. _doxid-classsophus_1_1_mut_image_1a18e600def58f93d7eab27a52ef29ce91:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	void reset()

Clears image.

If image was not empty, memory deallocations will happen.

.. index:: pair: function; makeCopyFrom
.. _doxid-classsophus_1_1_mut_image_1ae3daec7244442851606b481b3ddc98c2:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	static MutImage makeCopyFrom(:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TPixel> const& view)

Creates contiguous copy from view.

If view is not empty, memory allocation will happen.

.. index:: pair: function; makeFromTransform
.. _doxid-classsophus_1_1_mut_image_1a3f83eb3b54c431d620c67d05bb0eb79e:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <class TOtherPixel, class TUnaryOperation>
	static MutImage makeFromTransform(
		:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TOtherPixel> view,
		TUnaryOperation const& unary_op
	)

Creates new :ref:`MutImage <doxid-classsophus_1_1_mut_image>` given view and unary transform function.

mut_image(u, v) = unary_op(view(u, v));

.. index:: pair: function; makeFromTransform
.. _doxid-classsophus_1_1_mut_image_1a8af9f384c89f2ae849b9586fd5d6c51a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	template <class TLhsPixel, class TRhsPixel, class TBinaryOperation>
	static MutImage makeFromTransform(
		:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TLhsPixel> lhs,
		:ref:`ImageView<doxid-structsophus_1_1_image_view>`<TRhsPixel> rhs,
		TBinaryOperation const& binary_op
	)

Creates new :ref:`MutImage <doxid-classsophus_1_1_mut_image>` given two views and binary transform function.

mut_image(u, v) = binary_op(lhs(u, v), rhs(u, v));

.. index:: pair: function; leakAndReturnDeleter
.. _doxid-classsophus_1_1_mut_image_1a81fab866b4e49e17fc37f2cd05e3ab52:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	:ref:`Deleter<doxid-structsophus_1_1_mut_image_1_1_deleter>` leakAndReturnDeleter()

Leaks memory and returns deleter.

