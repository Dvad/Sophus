.. _global:
.. index:: pair: namespace; global

Global Namespace
================

.. toctree::
	:hidden:

	namespace_Eigen.rst
	namespace_ceres.rst
	namespace_sophus.rst
	struct_RotationalPart.rst
	struct_RotationalPart-2.rst
	struct_RotationalPart-3.rst
	struct_RotationalPart-4.rst
	struct_RotationalPart-5.rst
	struct_RotationalPart-6.rst
	struct_RotationalPart-7.rst
	struct_RotationalPart-8.rst
	struct_RotationalPart-9.rst

Overview
~~~~~~~~




.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	
	// namespaces

	namespace :ref:`Eigen<doxid-namespace_eigen>`;
	namespace :ref:`ceres<doxid-namespaceceres>`;
	namespace :ref:`sophus<doxid-namespacesophus>`;
		namespace :ref:`sophus::detail<doxid-namespacesophus_1_1detail>`;
		namespace :ref:`sophus::jet_helpers<doxid-namespacesophus_1_1jet__helpers>`;

	// typedefs

	using :target:`StdVector<doxid-ceres_2rxso2__test_8cpp_1a9ad293cf315c33e96e60a5157b3f0642>` = std::vector<TT, Eigen::aligned_allocator<TT>> ;
	using :target:`StdVector<doxid-ceres_2rxso3__test_8cpp_1a9ad293cf315c33e96e60a5157b3f0642>` = std::vector<TT, Eigen::aligned_allocator<TT>> ;
	using :target:`StdVector<doxid-ceres_2se2__test_8cpp_1a9ad293cf315c33e96e60a5157b3f0642>` = std::vector<TT, Eigen::aligned_allocator<TT>> ;
	using :target:`StdVector<doxid-ceres_2se3__test_8cpp_1a9ad293cf315c33e96e60a5157b3f0642>` = std::vector<TT, Eigen::aligned_allocator<TT>> ;
	using :target:`StdVector<doxid-ceres_2sim2__test_8cpp_1a9ad293cf315c33e96e60a5157b3f0642>` = std::vector<TT, Eigen::aligned_allocator<TT>> ;
	using :target:`StdVector<doxid-ceres_2sim3__test_8cpp_1a9ad293cf315c33e96e60a5157b3f0642>` = std::vector<TT, Eigen::aligned_allocator<TT>> ;
	using :target:`StdVector<doxid-ceres_2so2__test_8cpp_1a37b05f138e42d01eb88dd6fe6fd04268>` = std::vector<TScalar, Eigen::aligned_allocator<TScalar>> ;
	using :target:`StdVector<doxid-ceres_2so3__test_8cpp_1a9ad293cf315c33e96e60a5157b3f0642>` = std::vector<TT, Eigen::aligned_allocator<TT>> ;

	// structs

	template <class TLieGroup>
	struct :ref:`RotationalPart<doxid-struct_rotational_part>`;

	template <>
	struct :ref:`RotationalPart<sophus::Sim2d><doxid-struct_rotational_part_3_01sophus_1_1_sim2d_01_4>`;

	template <>
	struct :ref:`RotationalPart<sophus::Sim3d><doxid-struct_rotational_part_3_01sophus_1_1_sim3d_01_4>`;

	template <>
	struct :ref:`RotationalPart<sophus::SO2d><doxid-struct_rotational_part_3_01sophus_1_1_s_o2d_01_4>`;

	template <>
	struct :ref:`RotationalPart<sophus::SE3d><doxid-struct_rotational_part_3_01sophus_1_1_s_e3d_01_4>`;

	template <>
	struct :ref:`RotationalPart<sophus::RxSO3d><doxid-struct_rotational_part_3_01sophus_1_1_rx_s_o3d_01_4>`;

	template <>
	struct :ref:`RotationalPart<sophus::Se2F64><doxid-struct_rotational_part_3_01sophus_1_1_se2_f64_01_4>`;

	template <>
	struct :ref:`RotationalPart<sophus::RxSO2d><doxid-struct_rotational_part_3_01sophus_1_1_rx_s_o2d_01_4>`;

	template <>
	struct :ref:`RotationalPart<sophus::SO3d><doxid-struct_rotational_part_3_01sophus_1_1_s_o3d_01_4>`;

	// global variables

	constexpr double :target:`kEps<doxid-camera__model__test_8cpp_1af76b1cbee6975410245bb3137a44df6a>` = 1e-5;

	// global functions

	sophus_calculus :target:`farm_ng_add_library<doxid-calculus_2_c_make_lists_8txt_1ac9767726d526853033499b7b1bb4ba8d>`(sophus_calculus NAMESPACE sophus INCLUDE_DIR ../../HEADERS num_diff.h region. h);
	sophus_ceres :target:`farm_ng_add_library<doxid-ceres_2_c_make_lists_8txt_1ab087ddefa22800a657cec159cd5f6eb1>`(sophus_ceres NAMESPACE sophus INCLUDE_DIR ../../HEADERS jet_helpers.h manifold.h typetraits. h);
	:target:`find_package<doxid-ceres_2_c_make_lists_8txt_1abce78632778f332bf7ebaa6bf9da3e20>`(Ceres 2.1.0 REQUIRED);
	sophus_geometry :target:`farm_ng_add_library<doxid-geometry_2_c_make_lists_8txt_1ac5af3e3bd14427db1e0e5528ca46af05>`(sophus_geometry NAMESPACE sophus INCLUDE_DIR ../../HEADERS fit_plane.h inverse_depth.h plane_conv.h point_transform.h projection.h unit_vector.h ray. h);
	:target:`foreach<doxid-geometry_2_c_make_lists_8txt_1ac3bb42a77a2fca2ea1c4c749ce6442d4>`(test_basename fit_plane inverse_depth plane_conv point_transform projection unit_vector ray);
	sophus_image :target:`set<doxid-image_2_c_make_lists_8txt_1aeb78c187ac17753aa548ec01c8d70c22>`(sophus_image_src_prefixes interpolation image image_size image_types image_view runtime_image);
	:target:`list<doxid-image_2_c_make_lists_8txt_1af11fb813573ad109986ecf98ccb2adaf>`(APPEND sophus_image_cpp ${x}. cpp);
	h :target:`endforeach<doxid-image_2_c_make_lists_8txt_1aa61ee307b2daf1e98f4271c7c8e73efe>`();
	sophus_lie :target:`farm_ng_add_library<doxid-lie_2_c_make_lists_8txt_1a09adc7a00d35eff99eb25da51709e635>`(sophus_lie NAMESPACE sophus INCLUDE_DIR ../../HEADERS cartesian.h rxso2.h rxso3.h se2.h se3.h sim2.h sim3.h so2.h so3.h details/sim_impl. h);
	:target:`foreach<doxid-lie_2_c_make_lists_8txt_1a6d462f20eac9e012a799360c0e1707eb>`(test_basename cartesian2 cartesian3 common rxso2 rxso3 se2 se3 sim2 sim3 so2 so3);
	sophus_sensor :target:`set<doxid-sensor_2_c_make_lists_8txt_1a4deefe3ef82322b8ef39e304f2461b34>`(sophus_sensor_src_prefixes camera_model clipping_planes imu_model camera_rig orthographic);
	:target:`list<doxid-sensor_2_c_make_lists_8txt_1a80bbdb79c3ab98ebd3644f5ba8191b35>`(APPEND sophus_sensor_cpp ${x}. cpp);
	h :target:`endforeach<doxid-sensor_2_c_make_lists_8txt_1aa159bf81ab9afde9078969044abdcdc8>`();

	:target:`TEST<doxid-region__test_8cpp_1a94d929eadb462b65b863f3d4117c11c4>`(
		ScalarRegion,
		unit
		);

	int :target:`main<doxid-ceres_2rxso2__test_8cpp_1a2c3f6775325c30275d11c6abee2db6a0>`(
		int,
		char**
		);

	int :target:`main<doxid-lie_2rxso2__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4>`();

	int :target:`main<doxid-ceres_2rxso3__test_8cpp_1a2c3f6775325c30275d11c6abee2db6a0>`(
		int,
		char**
		);

	int :target:`main<doxid-lie_2rxso3__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4>`();

	int :target:`main<doxid-ceres_2se2__test_8cpp_1a2c3f6775325c30275d11c6abee2db6a0>`(
		int,
		char**
		);

	int :target:`main<doxid-lie_2se2__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4>`();

	int :target:`main<doxid-ceres_2se3__test_8cpp_1a2c3f6775325c30275d11c6abee2db6a0>`(
		int,
		char**
		);

	int :target:`main<doxid-lie_2se3__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4>`();

	int :target:`main<doxid-ceres_2sim2__test_8cpp_1a2c3f6775325c30275d11c6abee2db6a0>`(
		int,
		char**
		);

	int :target:`main<doxid-lie_2sim2__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4>`();

	int :target:`main<doxid-ceres_2sim3__test_8cpp_1a2c3f6775325c30275d11c6abee2db6a0>`(
		int,
		char**
		);

	int :target:`main<doxid-lie_2sim3__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4>`();

	int :target:`main<doxid-ceres_2so2__test_8cpp_1a2c3f6775325c30275d11c6abee2db6a0>`(
		int,
		char**
		);

	int :target:`main<doxid-lie_2so2__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4>`();

	int :target:`main<doxid-ceres_2so3__test_8cpp_1a2c3f6775325c30275d11c6abee2db6a0>`(
		int,
		char**
		);

	int :target:`main<doxid-lie_2so3__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4>`();

	:target:`TEST<doxid-fit__plane__test_8cpp_1ac8682f9164703b2e9327dc9a2c3128a9>`(
		fit_plane,
		smoke
		);

	:target:`TEST<doxid-inverse__depth__test_8cpp_1a23a4dfe5f9538a1dce3d489759f957b7>`(
		inverse_depth,
		integrations
		);

	int :target:`main<doxid-plane__conv__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4>`();

	:target:`TEST<doxid-point__transform__test_8cpp_1a23a4dfe5f9538a1dce3d489759f957b7>`(
		inverse_depth,
		integrations
		);

	:target:`TEST<doxid-point__transform__test_8cpp_1aa59b0667c46d8a2cfdb2141a4807cab7>`(
		point_transform,
		integrations
		);

	:target:`TEST<doxid-ray__test_8cpp_1a2325a5fea618d7c767c3e418a4037a66>`(
		ray,
		simple_ray3
		);

	:target:`TEST<doxid-unit__vector__test_8cpp_1ae52d2f370b2df52c00edfc8d58931a24>`(
		unitvec,
		unit2
		);

	:target:`TEST<doxid-unit__vector__test_8cpp_1a28e0ecb93357fd288c72a9072f8c7dcc>`(
		unitvec,
		unit3
		);

	:target:`TEST<doxid-unit__vector__test_8cpp_1a8051eff3b082e5018ae69eb21b8d64dd>`(
		unitvec,
		copy3
		);

	:target:`TEST<doxid-unit__vector__test_8cpp_1aab680c85e9ef5f09e38c8ec2ea6f91a0>`(
		unitvec,
		testRotThroughPoints
		);

	:target:`TEST<doxid-image__size__test_8cpp_1af15dff884104c3bc7dca72f9a126e62c>`(
		image_size,
		smoke
		);

	:target:`TEST<doxid-image__test_8cpp_1ac4736237b4d942ed8245443f240bd607>`(
		:ref:`MutImage<doxid-classsophus_1_1_mut_image>`,
		empty
		);

	:target:`TEST<doxid-image__test_8cpp_1a56ba0e1f798d3a82aae84c5be1f773c6>`(
		:ref:`MutImage<doxid-classsophus_1_1_mut_image>`,
		create_copy_access
		);

	:target:`TEST<doxid-image__test_8cpp_1a059be5d4f232be4e2c6a388d8821d736>`(
		:ref:`MutImage<doxid-classsophus_1_1_mut_image>`,
		makeFromTransform
		);

	:target:`TEST<doxid-image__test_8cpp_1a969d85cafd6e70bd9374655f6c1c6ad7>`(
		:ref:`Image<doxid-classsophus_1_1_image>`,
		empty_and_non_empty
		);

	:target:`TEST<doxid-image__test_8cpp_1a053de8b73aacb892c13be2a21779d240>`(
		:ref:`Image<doxid-classsophus_1_1_image>`,
		shared_ownership
		);

	:target:`TEST<doxid-image__types__test_8cpp_1a5fc5000d0c2688b183022ff3c130c5ab>`(
		:ref:`ImageBool<doxid-namespacesophus_1a84ba571059139ad8de131bb9de2343d3>`,
		logic
		);

	:target:`TEST<doxid-image__types__test_8cpp_1a9fca4472abe0011016fefeca992a1342>`(
		:ref:`SOPHUS_ASSERT_IMAGE_EQ<doxid-image__types_8h_1affc52c41f1da39b9d6bdac80c943449f>`,
		death_test
		);

	:target:`TEST<doxid-image__view__test_8cpp_1ae34b8f692eae9e7a6967c8ed4a347d28>`(
		:ref:`ImageView<doxid-structsophus_1_1_image_view>`,
		empty
		);

	:target:`TEST<doxid-image__view__test_8cpp_1a01225ed24c59192b4d435b73940a0683>`(
		:ref:`ImageView<doxid-structsophus_1_1_image_view>`,
		create_and_access
		);

	:target:`TEST<doxid-image__view__test_8cpp_1a5016156a4fdf5b7293df6e1c36e5de2e>`(
		:ref:`MutImageView<doxid-classsophus_1_1_mut_image_view>`,
		empty
		);

	:target:`TEST<doxid-image__view__test_8cpp_1a0ef2334786a81b11abab4f6a5b692afd>`(
		:ref:`MutImageView<doxid-classsophus_1_1_mut_image_view>`,
		create_and_access
		);

	:target:`TEST<doxid-interpolation__test_8cpp_1a5c1375709bbae172b7993d80fa383320>`(
		interpolation,
		unit
		);

	:target:`TEST<doxid-runtime__image__test_8cpp_1ab6cbc08fe602f3b8ed4412f04956fae4>`(
		:ref:`AnyImage<doxid-namespacesophus_1adb6711a268fb760dee2a4edea510e179>`,
		create_access_and_extract
		);

	:target:`TEST<doxid-runtime__image__test_8cpp_1adbb2ad9bc8e286b0249c5409527fde7c>`(
		:ref:`IntensityImage<doxid-namespacesophus_1a131561c9e39e2daf347947a106dcd071>`,
		create_access_and_extract
		);

	:target:`TEST<doxid-runtime__image__test_8cpp_1af6e3c340d2155eb5cc56741078353b0e>`(
		:ref:`AnyImage<doxid-namespacesophus_1adb6711a268fb760dee2a4edea510e179>`,
		runtime_type_info
		);

	float :target:`sum<doxid-runtime__image__test_8cpp_1ae087e9700a3d5f427dede7bd34cb454b>`(:ref:`ImageView<doxid-structsophus_1_1_image_view>`<float> view);
	void :target:`plusOne<doxid-runtime__image__test_8cpp_1a295ef1281203aad88e5949bd29fb351c>`(:ref:`MutImageView<doxid-classsophus_1_1_mut_image_view>`<float> mut_view);

	:target:`TEST<doxid-runtime__image__test_8cpp_1a0460f7092bedf3357f153bbf64b93d5d>`(
		:ref:`IntensityImageView<doxid-namespacesophus_1a2988e27437c2b346ee6eeb2dac06de83>`,
		subview
		);

	:target:`TEST<doxid-runtime__image__test_8cpp_1a0045a4dab7360f9b4f179210438b6124>`(
		ClassHierarchy,
		call_function
		);

	:target:`TEST<doxid-runtime__image__test_8cpp_1a3a3e36769904c711488c51c1a91bc528>`(
		:ref:`IntensityImage<doxid-namespacesophus_1a131561c9e39e2daf347947a106dcd071>`,
		visitor
		);

	int :target:`main<doxid-cartesian2__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4>`();
	int :target:`main<doxid-cartesian3__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4>`();
	int :target:`main<doxid-common__test_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4>`();
	:ref:`CameraModel<doxid-classsophus_1_1_camera_model>` :target:`openCvCameraModel<doxid-camera__model__test_8cpp_1a337f48efa1feb10176bc6c682350cbb5>`();

	:target:`TEST<doxid-camera__model__test_8cpp_1ae60c2856c31f30e24a04021ae180bb7d>`(
		camera_model,
		projection_round_trip
		);

	:target:`TEST<doxid-camera__model__test_8cpp_1a9a84f07f639f5b064bee88f468e46aeb>`(
		camera_model,
		scale_up_down_roundtrip
		);

	:target:`TEST<doxid-camera__model__test_8cpp_1adbbee1a53cdf100d76d0e6c0d4ae62ad>`(
		camera_model,
		ortho_cam
		);

	:target:`TEST<doxid-camera__rig__test_8cpp_1af3fbe44ebfcae081d4d12b2ebb8c1718>`(
		camera_rig,
		smoke
		);

	:target:`TEST<doxid-imu__model__test_8cpp_1a8d64a46e5c782e5252e2432ad043b2a6>`(
		imu_model,
		smoke
		);

	// macros

	#define :target:`SOPHUS_ASSERT<doxid-common_8h_1a8f58b46a5623974748668dc8c53ad686>`(...)
	#define :target:`SOPHUS_ASSERT_EQ<doxid-common_8h_1a92297bdb86ae55e64e7dc3b48d3190b5>`(...)
	#define :target:`SOPHUS_ASSERT_GE<doxid-common_8h_1a4458283091058e430ff56b37e5d90182>`(...)
	#define :target:`SOPHUS_ASSERT_GT<doxid-common_8h_1a67e8d5781bb21fc85998e8b95a0aab10>`(...)

	#define :ref:`SOPHUS_ASSERT_IMAGE_EQ<doxid-image__types_8h_1affc52c41f1da39b9d6bdac80c943449f>`( \
		left_image, \
		right_image, \
		... \
		)

	#define :target:`SOPHUS_ASSERT_LE<doxid-common_8h_1a0d035483e474118423a361272800b293>`(...)
	#define :target:`SOPHUS_ASSERT_LT<doxid-common_8h_1aadc6d2ed0adcf9b174f4ad07349cdaaa>`(...)
	#define :target:`SOPHUS_ASSERT_NE<doxid-common_8h_1abc35935bbde1d290087671ff93cea3c0>`(...)
	#define :target:`SOPHUS_ASSERT_NEAR<doxid-common_8h_1a72a75eb7f9bba13d95af868b8667a0a0>`(...)
	#define :target:`SOPHUS_ASSERT_OR_ERROR<doxid-common_8h_1ac90e2b9dceea8b4969c81290d7b69c3f>`(...)
	#define :target:`SOPHUS_ENUM<doxid-enum_8h_1a3da4835ed2aad55263ab99c6db51ab91>`(...)
	#define :target:`SOPHUS_FORMAT<doxid-common_8h_1a50fadb13da7af3ebb54f13fcf2d90455>`(...)
	#define :target:`SOPHUS_FUNC<doxid-common_8h_1a719070c34a48abcdf2f623e4160b4c28>`
	#define :target:`SOPHUS_FUNCTION<doxid-common_8h_1adc97d3e69cc46d5aff5132e1fa2d9688>`
	#define :target:`SOPHUS_INFO<doxid-common_8h_1a7e1e64911421a663cac1ca5fe4e66339>`(...)
	#define :target:`SOPHUS_PANIC<doxid-common_8h_1af28e1f1a48df52cee7fb2775a054d921>`(...)
	#define :target:`SOPHUS_STRINGIFY<doxid-test__macros_8h_1a9a763d03e0d8daa3c7cb92eb1db5220d>`(x)

	#define :ref:`SOPHUS_TEST<doxid-test__macros_8h_1a094dfcb125cce443541e6614df9ff704>`( \
		passed, \
		condition, \
		descr, \
		... \
		)

	#define :ref:`SOPHUS_TEST_APPROX<doxid-test__macros_8h_1adceb75d7f4ac8872a96560097b91f090>`( \
		passed, \
		left, \
		right, \
		thr, \
		descr, \
		... \
		)

	#define :ref:`SOPHUS_TEST_EQUAL<doxid-test__macros_8h_1afa1fcfecdacca873ea54874272d05e90>`( \
		passed, \
		left, \
		right, \
		descr, \
		... \
		)

	#define :target:`SOPHUS_TEST_IMG_EQ<doxid-runtime__image__test_8cpp_1a229e4238019191b909cf235cfa061bb9>`( \
		lhs, \
		rhs \
		)

	#define :ref:`SOPHUS_TEST_NEQ<doxid-test__macros_8h_1a47cf0311fff8d84d7044a599dc452b6a>`( \
		passed, \
		left, \
		right, \
		descr, \
		... \
		)

	#define :ref:`SOPHUS_TEST_NOT_APPROX<doxid-test__macros_8h_1a2cf21393818b417fb877bd6198d1b140>`( \
		passed, \
		left, \
		right, \
		thr, \
		descr, \
		... \
		)

	#define :target:`SOPHUS_TRY<doxid-common_8h_1a71dfe4dd2df5e006549f2f48601520ad>`(...)
	#define :target:`SOPHUS_UNEXPECTED<doxid-common_8h_1ae3d125b974f106017f2b47627b5c4ac1>`(...)
	#define :target:`SOPHUS_UNIMPLEMENTED<doxid-common_8h_1ade3de0907bb0fd6f33cf2f644475f1fd>`(...)
	#define :target:`SOPHUS_UNWRAP<doxid-common_8h_1a0f6f659ed8dc626650e01e987fcaf2e7>`(...)

.. _details-global:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~



Macros
------

.. index:: pair: define; SOPHUS_ASSERT_IMAGE_EQ
.. _doxid-image__types_8h_1affc52c41f1da39b9d6bdac80c943449f:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SOPHUS_ASSERT_IMAGE_EQ(left_image, right_image, ...)

If it is false that ``left_image`` == ``right_image``, print formatted error message and then panic.

.. index:: pair: define; SOPHUS_TEST
.. _doxid-test__macros_8h_1a094dfcb125cce443541e6614df9ff704:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SOPHUS_TEST(passed, condition, descr, ...)

Tests whether condition is true. The in-out parameter passed will be set to false if test fails.

.. index:: pair: define; SOPHUS_TEST_APPROX
.. _doxid-test__macros_8h_1adceb75d7f4ac8872a96560097b91f090:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SOPHUS_TEST_APPROX(passed, left, right, thr, descr, ...)

Tests whether left is approximately equal to right given a threshold. The in-out parameter passed will be set to false if test fails.

.. index:: pair: define; SOPHUS_TEST_EQUAL
.. _doxid-test__macros_8h_1afa1fcfecdacca873ea54874272d05e90:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SOPHUS_TEST_EQUAL(passed, left, right, descr, ...)

Tests whether left is equal to right given a threshold. The in-out parameter passed will be set to false if test fails.

.. index:: pair: define; SOPHUS_TEST_NEQ
.. _doxid-test__macros_8h_1a47cf0311fff8d84d7044a599dc452b6a:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SOPHUS_TEST_NEQ(passed, left, right, descr, ...)

Tests whether left is equal to right given a threshold. The in-out parameter passed will be set to false if test fails.

.. index:: pair: define; SOPHUS_TEST_NOT_APPROX
.. _doxid-test__macros_8h_1a2cf21393818b417fb877bd6198d1b140:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	#define SOPHUS_TEST_NOT_APPROX(passed, left, right, thr, descr, ...)

Tests whether left is NOT approximately equal to right given a threshold. The in-out parameter passed will be set to false if test fails.

