.. index:: pair: class; sophus::PointTransformer
.. _doxid-classsophus_1_1_point_transformer:

template class sophus::PointTransformer
=======================================

.. toctree::
	:hidden:

Overview
~~~~~~~~

Functor to efficiently transform a number of point given a :ref:`Se3 <doxid-classsophus_1_1_se3>` pose. :ref:`More...<details-classsophus_1_1_point_transformer>`


.. ref-code-block:: cpp
	:class: doxyrest-overview-code-block

	#include <point_transform.h>
	
	template <class TT>
	class PointTransformer {
	public:
		// construction
	
		:target:`PointTransformer<doxid-classsophus_1_1_point_transformer_1a5c934e29ba79a2381a833a8dc2855482>`();
		:target:`PointTransformer<doxid-classsophus_1_1_point_transformer_1a91a7482137a34e5b9fc4271c6828b55c>`(:ref:`sophus::Se3<doxid-classsophus_1_1_se3>`<TT> const& foo_from_bar);

		// methods
	
		Eigen::Matrix<TT, 3, 1> :ref:`transform<doxid-classsophus_1_1_point_transformer_1ad0864938b0319eb29197e78cd28ecfef>`(Eigen::Matrix<TT, 3, 1> const& point_in_bar) const;
		Eigen::Matrix<TT, 3, 1> :target:`scaledTransform<doxid-classsophus_1_1_point_transformer_1a8cf0045539fe98c543f0b02fc47b5bfa>`(:ref:`InverseDepthPoint3<doxid-classsophus_1_1_inverse_depth_point3>`<TT> const& inverse_depth_point_in_bar) const;
		Eigen::Matrix<TT, 2, 1> :ref:`projTransform<doxid-classsophus_1_1_point_transformer_1a92e6ef7f9e16de950aef0ccc79c569f0>`(Eigen::Matrix<TT, 3, 1> const& point_in_bar) const;
		Eigen::Matrix<TT, 2, 1> :ref:`projTransform<doxid-classsophus_1_1_point_transformer_1acab2093fc7bd7c5c6714417aaf0eaf77>`(:ref:`InverseDepthPoint3<doxid-classsophus_1_1_inverse_depth_point3>`<TT> const& inverse_depth_point_in_bar) const;
		Eigen::Matrix<TT, 2, 6> :ref:`dxProjExpXTransformPointAt0<doxid-classsophus_1_1_point_transformer_1aca8045c2d814559274691fbb750a81e5>`(:ref:`InverseDepthPoint3<doxid-classsophus_1_1_inverse_depth_point3>`<TT> const& inverse_depth_point_in_bar) const;
		Eigen::Matrix<TT, 2, 3> :target:`dxProjTransformX<doxid-classsophus_1_1_point_transformer_1abeedcab7806ca0919f96ae6219316305>`(:ref:`InverseDepthPoint3<doxid-classsophus_1_1_inverse_depth_point3>`<TT> const& inverse_depth_point_in_bar) const;
		:ref:`sophus::Se3<doxid-classsophus_1_1_se3>`<TT> const& :target:`fooFromBar<doxid-classsophus_1_1_point_transformer_1a307a5c2538e02199bc0a538bf3916cb7>`() const;
		Eigen::Matrix<TT, 3, 3> const& :target:`fooRotationBar<doxid-classsophus_1_1_point_transformer_1a790eab92f39abf9388a37c3d0520c19d>`() const;
		Eigen::Matrix<TT, 3, 1> const& :target:`barOriginInFoo<doxid-classsophus_1_1_point_transformer_1ab00fcb73a0775caadf7a7e1ea105fd43>`() const;
	};
.. _details-classsophus_1_1_point_transformer:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

Functor to efficiently transform a number of point given a :ref:`Se3 <doxid-classsophus_1_1_se3>` pose.

When transforming a point ``point_in_bar`` given a :ref:`sophus::Se3 <doxid-classsophus_1_1_se3>` pose ``foo_from_bar``, one can simply use

``Eigen::Vector3d = foo_from_bar * point_in_bar;``

Internally, this applies the (unit) quaternion to the left and the right of the point to rotate it and then adds the translation:

.. code-block:: cpp

	point_in_foo = q*point_in_bar*q' + bar_origin_in_foo.

If there are a lot of point to transform, there is a more efficient way using the rotation matrix R which can be precomputed from the quaternion q.

point_in_foo = R \* point_in_bar + bar_origin_in_foo

This is what this functor is for.

Methods
-------

.. index:: pair: function; transform
.. _doxid-classsophus_1_1_point_transformer_1ad0864938b0319eb29197e78cd28ecfef:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Eigen::Matrix<TT, 3, 1> transform(Eigen::Matrix<TT, 3, 1> const& point_in_bar) const

Transforms a 3-point from frame bar to frame foo.

.. index:: pair: function; projTransform
.. _doxid-classsophus_1_1_point_transformer_1a92e6ef7f9e16de950aef0ccc79c569f0:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Eigen::Matrix<TT, 2, 1> projTransform(Eigen::Matrix<TT, 3, 1> const& point_in_bar) const

Transforms 3-point in frame bar to foo and projects it onto the Euclidean plane z=1 in foo.

.. index:: pair: function; projTransform
.. _doxid-classsophus_1_1_point_transformer_1acab2093fc7bd7c5c6714417aaf0eaf77:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Eigen::Matrix<TT, 2, 1> projTransform(:ref:`InverseDepthPoint3<doxid-classsophus_1_1_inverse_depth_point3>`<TT> const& inverse_depth_point_in_bar) const

Transforms and projects the 3d inverse depth point in frame bar to the Euclidean plane z=1 in foo.

.. index:: pair: function; dxProjExpXTransformPointAt0
.. _doxid-classsophus_1_1_point_transformer_1aca8045c2d814559274691fbb750a81e5:

.. ref-code-block:: cpp
	:class: doxyrest-title-code-block

	Eigen::Matrix<TT, 2, 6> dxProjExpXTransformPointAt0(:ref:`InverseDepthPoint3<doxid-classsophus_1_1_inverse_depth_point3>`<TT> const& inverse_depth_point_in_bar) const

Returns pose derivative of inverse depth point projection at the identity:

Dx proj(exp(x) \* foo_from_bar \* foo_in_bar.toEuclideanPoint3()) at x=0

with foo_in_bar = (a,b,psi) being an inverse depth point.

